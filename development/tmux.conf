# : <<EOF
#
# SETTINGS ####################################################################
#

# General. ====================================================================

# increase scrollback buffer
set-option -g history-limit 50000

# Visuals. ====================================================================

# Set tmux to use colors.
set-option -g default-terminal "screen-256color" # colors!
# Start counting windows at 1.
set -g base-index 1

# Renumber windows when window is closed.
set -g renumber-windows on

# Rename window to reflect current program.
set-option -w -g automatic-rename on

# Expect UTF-8 (tmux < 2.2).
set-option -q -g status-utf8 on
set-option -w -q -g utf8 on

# Status bar.------------------------------------------------------------------

# Bar length.
set -g status-left-length 60
set -g status-right-length 150

# Disable visual and bell notifications.
set-option -g monitor-activity off
set-option -g visual-activity off

# Redraw status bar.
set-option -g status-interval 10

# Status bar default colors.
set-option -g status-style fg=colour7,bg=colour0

# Status bar window list colors.
set-option -g window-status-style fg=black,bg=white

# Status bar delimiters.
#  U+e0b0
#  U+e0b1
#  U+e0b2
#  U+e0b3

# Status bar left.
# Shows wether pane is zoomed and wether prefix is pressed.
set-option -g status-left "\
#[fg=colour0, bg=colour7]#{?client_prefix,#[bg=colour2],} ❐ #S \
#[fg=colour7, bg=colour0]#{?client_prefix,#[fg=colour2],}\
#[fg=colour3]#{?window_zoomed_flag,  ,}"

# Current window format.
set-window-option -g window-status-format "\
#[fg=colour0, bg=colour8,noitalics]\
#[fg=colour0, bg=colour8] #I \
#[fg=colour0, bg=colour8] #W \
#[fg=colour8, bg=colour0]"

# Window list format.
set-window-option -g window-status-current-format "\
#[fg=colour0, bg=colour2]\
#[fg=colour0, bg=colour2] #I \
#[fg=colour0, bg=colour2] #W \
#[fg=colour2, bg=colour0]"

# Status bar right.
# Shows wether prefix is used for local session or will be handled by nested
# remote session.
# Also shows wether panes are in sync or not.
set-option -g status-right "\
#[fg=colour7,bold, bg=colour0]#{?pane_synchronized,  ,}\
#[fg=colour3, bg=colour0]#{?pane_synchronized,SYNCED,}\
#[fg=colour7, bg=colour0]#{?tmux_keytable,  ,}\
#[fg=colour3, bg=colour0]#{?tmux_keytable,REMOTE,}\
#[fg=colour4, bg=colour0]  %d.%m.%Y\
#[fg=colour1]  %H:%M\
#[fg=colour7,nobold, bg=colour0] \
#[fg=colour0, bg=colour7] #(cut -c3- ~/.tmux.conf | sh -s _username)\
#[fg=colour8, bg=colour7] \
#[fg=colour0, bg=colour8] #(cut -c3- ~/.tmux.conf | sh -s _hostname) "

# Navigation. =================================================================

# Set Prefix key.
unbind-key 'C-b'
set-option -g prefix 'C-k'

# Set vi mode.
set-window-option -g mode-keys vi

# Commands. ===================================================================

# Edit configuration.
bind-key e new-window -n "~/.tmux.conf.local" "EDITOR=\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf reloaded.\""

# Reload configuration.
bind-key r source-file ~/.tmux.conf \; display '~/.tmux.conf reloaded.'

#
# KEYBINDINGS ##################################################################
#

# Useful Default Keybindings. ==================================================

# bind-key n next-window
# bind-key p previous-window
# bind-key w choose-tree -w
# bind-key s choose-tree -s
# bind-key o rotate-window
# bind-key f find-window

# Custom Keybindings. ==========================================================

# Panes. -----------------------------------------------------------------------

# Pane movement.
bind-key h select-pane -L\; refresh-client -S
bind-key j select-pane -D\; refresh-client -S
bind-key k select-pane -U\; refresh-client -S
bind-key l select-pane -R\; refresh-client -S

# Pane resizing.
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Split window into panes.
unbind-key '"'
bind-key v split-window -h -c '#{pane_current_path}'\; refresh-client -S
unbind-key '%'
bind-key - split-window -v -c '#{pane_current_path}'\; refresh-client -S

# Kill current pane.
bind-key x kill-pane\; refresh-client -S

# Syncronize panes.
bind-key S set-window-option synchronize-panes

# Windows. ---------------------------------------------------------------------

# Switch to last used window.
bind-key Tab last-window

# Window movement.
bind-key 1 select-window -t:1\; refresh-client -S
bind-key 2 select-window -t:2\; refresh-client -S
bind-key 3 select-window -t:3\; refresh-client -S
bind-key 4 select-window -t:4\; refresh-client -S
bind-key 5 select-window -t:5\; refresh-client -S
bind-key 6 select-window -t:6\; refresh-client -S
bind-key 7 select-window -t:7\; refresh-client -S
bind-key 8 select-window -t:8\; refresh-client -S
bind-key 9 select-window -t:9\; refresh-client -S

# Keymaps. ---------------------------------------------------------------------

# Toogle keymap to work in nested remote tmux session.
bind-key -T root F12  \
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

bind-key -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

# Copy Mode. -------------------------------------------------------------------

# Enter/leave vim copy mode.
bind-key Enter copy-mode
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi q send -X cancel

# Vim selection mode.
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line

# Copy to Wayland clipboard.
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | wl-copy < \"${1:-/dev/stdin}\""'
# Copy to X11 clipboard.
if -b 'command -v xsel > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# Copy to macOS clipboard.
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'


# Past from Wayland clipboard.
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind-key -T copy-mode-vi p send -X copy-pipe-and-cancel "wl-copy"'

# -- buffers -------------------------------------------------------------------

bind-key b list-buffers  # list paste buffers
bind-key p paste-buffer  # paste from the top paste buffer
bind-key P choose-buffer # choose which buffer to paste from

# Nice stuff. ------------------------------------------------------------------

# Urlview.
bind-key U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

#
# REMOTE AWERENESS #############################################################
# 

# Set indicator for keymap.
run-shell 'tmux set-environment -g tmux_keytable \
    $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
    then echo 1; else echo 0; fi)'

# Load settings for remote session.
if-shell 'test -n "$SSH_CLIENT"' 'source-file -q ~/.tmux.conf.remote'

#
# USER OVERRIDES ###############################################################
# 

source-file -q ~/.tmux.conf.local

run 'cut -c3- ~/.tmux.conf | sh -s _read_function_overrides'

# EOF
